using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class EnemyShipModel 
{
    [RealtimeProperty(1, true, true)]
    private bool _isHitBool;

    [RealtimeProperty(2, true, true)]
    private bool _fireActive;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class EnemyShipModel : RealtimeModel {
    public bool isHitBool {
        get {
            return _isHitBoolProperty.value;
        }
        set {
            if (_isHitBoolProperty.value == value) return;
            _isHitBoolProperty.value = value;
            InvalidateReliableLength();
            FireIsHitBoolDidChange(value);
        }
    }
    
    public bool fireActive {
        get {
            return _fireActiveProperty.value;
        }
        set {
            if (_fireActiveProperty.value == value) return;
            _fireActiveProperty.value = value;
            InvalidateReliableLength();
            FireFireActiveDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(EnemyShipModel model, T value);
    public event PropertyChangedHandler<bool> isHitBoolDidChange;
    public event PropertyChangedHandler<bool> fireActiveDidChange;
    
    public enum PropertyID : uint {
        IsHitBool = 1,
        FireActive = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isHitBoolProperty;
    
    private ReliableProperty<bool> _fireActiveProperty;
    
    #endregion
    
    public EnemyShipModel() : base(null) {
        _isHitBoolProperty = new ReliableProperty<bool>(1, _isHitBool);
        _fireActiveProperty = new ReliableProperty<bool>(2, _fireActive);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isHitBoolProperty.UnsubscribeCallback();
        _fireActiveProperty.UnsubscribeCallback();
    }
    
    private void FireIsHitBoolDidChange(bool value) {
        try {
            isHitBoolDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireFireActiveDidChange(bool value) {
        try {
            fireActiveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isHitBoolProperty.WriteLength(context);
        length += _fireActiveProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isHitBoolProperty.Write(stream, context);
        writes |= _fireActiveProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsHitBool: {
                    changed = _isHitBoolProperty.Read(stream, context);
                    if (changed) FireIsHitBoolDidChange(isHitBool);
                    break;
                }
                case (uint) PropertyID.FireActive: {
                    changed = _fireActiveProperty.Read(stream, context);
                    if (changed) FireFireActiveDidChange(fireActive);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isHitBool = isHitBool;
        _fireActive = fireActive;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
