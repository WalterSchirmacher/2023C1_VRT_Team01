using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class BatterySyncModel 
{
    [RealtimeProperty(1, true, true)]
    private bool _isShowing;



}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class BatterySyncModel : RealtimeModel {
    public bool isShowing {
        get {
            return _isShowingProperty.value;
        }
        set {
            if (_isShowingProperty.value == value) return;
            _isShowingProperty.value = value;
            InvalidateReliableLength();
            FireIsShowingDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(BatterySyncModel model, T value);
    public event PropertyChangedHandler<bool> isShowingDidChange;
    
    public enum PropertyID : uint {
        IsShowing = 1,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isShowingProperty;
    
    #endregion
    
    public BatterySyncModel() : base(null) {
        _isShowingProperty = new ReliableProperty<bool>(1, _isShowing);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isShowingProperty.UnsubscribeCallback();
    }
    
    private void FireIsShowingDidChange(bool value) {
        try {
            isShowingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isShowingProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isShowingProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsShowing: {
                    changed = _isShowingProperty.Read(stream, context);
                    if (changed) FireIsShowingDidChange(isShowing);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isShowing = isShowing;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
