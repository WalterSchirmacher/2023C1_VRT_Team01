using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class IonTargetingNewModel
{
    [RealtimeProperty(1, true, true)]
    private bool _moveObjShowing;

    [RealtimeProperty(2, false, true)]
    private Vector3 _targetPosition;

    [RealtimeProperty(3, false, true)]
    private bool _playErrSnd;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class IonTargetingNewModel : RealtimeModel {
    public UnityEngine.Vector3 targetPosition {
        get {
            return _targetPositionProperty.value;
        }
        set {
            if (_targetPositionProperty.value == value) return;
            _targetPositionProperty.value = value;
            InvalidateUnreliableLength();
            FireTargetPositionDidChange(value);
        }
    }
    
    public bool playErrSnd {
        get {
            return _playErrSndProperty.value;
        }
        set {
            if (_playErrSndProperty.value == value) return;
            _playErrSndProperty.value = value;
            InvalidateUnreliableLength();
            FirePlayErrSndDidChange(value);
        }
    }
    
    public bool moveObjShowing {
        get {
            return _moveObjShowingProperty.value;
        }
        set {
            if (_moveObjShowingProperty.value == value) return;
            _moveObjShowingProperty.value = value;
            InvalidateReliableLength();
            FireMoveObjShowingDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(IonTargetingNewModel model, T value);
    public event PropertyChangedHandler<bool> moveObjShowingDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> targetPositionDidChange;
    public event PropertyChangedHandler<bool> playErrSndDidChange;
    
    public enum PropertyID : uint {
        MoveObjShowing = 1,
        TargetPosition = 2,
        PlayErrSnd = 3,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _moveObjShowingProperty;
    
    private UnreliableProperty<UnityEngine.Vector3> _targetPositionProperty;
    
    private UnreliableProperty<bool> _playErrSndProperty;
    
    #endregion
    
    public IonTargetingNewModel() : base(null) {
        _moveObjShowingProperty = new ReliableProperty<bool>(1, _moveObjShowing);
        _targetPositionProperty = new UnreliableProperty<UnityEngine.Vector3>(2, _targetPosition);
        _playErrSndProperty = new UnreliableProperty<bool>(3, _playErrSnd);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _moveObjShowingProperty.UnsubscribeCallback();
    }
    
    private void FireMoveObjShowingDidChange(bool value) {
        try {
            moveObjShowingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTargetPositionDidChange(UnityEngine.Vector3 value) {
        try {
            targetPositionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlayErrSndDidChange(bool value) {
        try {
            playErrSndDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _moveObjShowingProperty.WriteLength(context);
        length += _targetPositionProperty.WriteLength(context);
        length += _playErrSndProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _moveObjShowingProperty.Write(stream, context);
        writes |= _targetPositionProperty.Write(stream, context);
        writes |= _playErrSndProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.MoveObjShowing: {
                    changed = _moveObjShowingProperty.Read(stream, context);
                    if (changed) FireMoveObjShowingDidChange(moveObjShowing);
                    break;
                }
                case (uint) PropertyID.TargetPosition: {
                    changed = _targetPositionProperty.Read(stream, context);
                    if (changed) FireTargetPositionDidChange(targetPosition);
                    break;
                }
                case (uint) PropertyID.PlayErrSnd: {
                    changed = _playErrSndProperty.Read(stream, context);
                    if (changed) FirePlayErrSndDidChange(playErrSnd);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _moveObjShowing = moveObjShowing;
        _targetPosition = targetPosition;
        _playErrSnd = playErrSnd;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
