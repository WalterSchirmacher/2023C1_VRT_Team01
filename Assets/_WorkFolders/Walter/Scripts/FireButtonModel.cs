using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class FireButtonModel 
{
    [RealtimeProperty(1, true, true)]
    private bool _fireButton;

    [RealtimeProperty(2, true, true)]
    private bool _laserColVis;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class FireButtonModel : RealtimeModel {
    public bool fireButton {
        get {
            return _fireButtonProperty.value;
        }
        set {
            if (_fireButtonProperty.value == value) return;
            _fireButtonProperty.value = value;
            InvalidateReliableLength();
            FireFireButtonDidChange(value);
        }
    }
    
    public bool laserColVis {
        get {
            return _laserColVisProperty.value;
        }
        set {
            if (_laserColVisProperty.value == value) return;
            _laserColVisProperty.value = value;
            InvalidateReliableLength();
            FireLaserColVisDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(FireButtonModel model, T value);
    public event PropertyChangedHandler<bool> fireButtonDidChange;
    public event PropertyChangedHandler<bool> laserColVisDidChange;
    
    public enum PropertyID : uint {
        FireButton = 1,
        LaserColVis = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _fireButtonProperty;
    
    private ReliableProperty<bool> _laserColVisProperty;
    
    #endregion
    
    public FireButtonModel() : base(null) {
        _fireButtonProperty = new ReliableProperty<bool>(1, _fireButton);
        _laserColVisProperty = new ReliableProperty<bool>(2, _laserColVis);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _fireButtonProperty.UnsubscribeCallback();
        _laserColVisProperty.UnsubscribeCallback();
    }
    
    private void FireFireButtonDidChange(bool value) {
        try {
            fireButtonDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLaserColVisDidChange(bool value) {
        try {
            laserColVisDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _fireButtonProperty.WriteLength(context);
        length += _laserColVisProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _fireButtonProperty.Write(stream, context);
        writes |= _laserColVisProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.FireButton: {
                    changed = _fireButtonProperty.Read(stream, context);
                    if (changed) FireFireButtonDidChange(fireButton);
                    break;
                }
                case (uint) PropertyID.LaserColVis: {
                    changed = _laserColVisProperty.Read(stream, context);
                    if (changed) FireLaserColVisDidChange(laserColVis);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _fireButton = fireButton;
        _laserColVis = laserColVis;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
