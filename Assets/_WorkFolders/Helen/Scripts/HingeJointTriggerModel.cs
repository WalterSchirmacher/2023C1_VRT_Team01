using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;



[RealtimeModel]
public partial class HingeJointTriggerModel 
{
    [RealtimeProperty(1, true, true)]
    private float _angleBetweenThreshold = 1f;

    /*[RealtimeProperty(2, true, true)]
    private UnityEvent _onMinLimitReached;

    [RealtimeProperty(3, true, true)]
    private UnityEvent _onMaxLimitReached;

    [RealtimeProperty(2, true, true)]
    private HingeJoint _hinge; */
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HingeJointTriggerModel : RealtimeModel {
    public float angleBetweenThreshold {
        get {
            return _angleBetweenThresholdProperty.value;
        }
        set {
            if (_angleBetweenThresholdProperty.value == value) return;
            _angleBetweenThresholdProperty.value = value;
            InvalidateReliableLength();
            FireAngleBetweenThresholdDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(HingeJointTriggerModel model, T value);
    public event PropertyChangedHandler<float> angleBetweenThresholdDidChange;
    
    public enum PropertyID : uint {
        AngleBetweenThreshold = 1,
    }
    
    #region Properties
    
    private ReliableProperty<float> _angleBetweenThresholdProperty;
    
    #endregion
    
    public HingeJointTriggerModel() : base(null) {
        _angleBetweenThresholdProperty = new ReliableProperty<float>(1, _angleBetweenThreshold);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _angleBetweenThresholdProperty.UnsubscribeCallback();
    }
    
    private void FireAngleBetweenThresholdDidChange(float value) {
        try {
            angleBetweenThresholdDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _angleBetweenThresholdProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _angleBetweenThresholdProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.AngleBetweenThreshold: {
                    changed = _angleBetweenThresholdProperty.Read(stream, context);
                    if (changed) FireAngleBetweenThresholdDidChange(angleBetweenThreshold);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _angleBetweenThreshold = angleBetweenThreshold;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
